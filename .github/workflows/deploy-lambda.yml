name: Deploy Lambda Function

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      function_name:
        description: 'Lambda function name'
        required: true
        default: 'meraki-network-automation'
      memory:
        description: 'Memory size (MB)'
        required: true
        default: '256'
        type: choice
        options:
          - '128'
          - '256'
          - '512'
          - '1024'
      enable_vpc:
        description: 'Enable VPC for static IP'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Package Lambda dependencies
        run: |
          # Create directories
          mkdir -p package/python
          mkdir -p function
          
          # Install dependencies for layer from production directory
          pip install -r production/network/meraki/requirements.txt -t package/python/
          
          # Create layer package
          cd package
          zip -r ../lambda-layer.zip python/
          cd ..
          
          # Prepare function package - copy from production directory
          cp -r production/network/meraki/* function/
          
          # Copy lambda handler from production directory or root (fallback)
          if [ -f "production/network/meraki/lambda_handler.py" ]; then
            echo "Using lambda_handler.py from production directory"
          elif [ -f "lambda_handler.py" ]; then
            cp lambda_handler.py function/
            echo "Using lambda_handler.py from root directory"
          else
            echo "::error::lambda_handler.py not found in production/network/meraki/ or root directory"
            exit 1
          fi
          
          # Create function package
          cd function
          zip -r ../lambda.zip .
          cd ..
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: eu-west-1
          
      - name: Update Lambda Layer
        id: layer_version
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name meraki-dependencies \
            --description "Dependencies for Meraki automation" \
            --zip-file fileb://lambda-layer.zip \
            --compatible-runtimes python3.9 \
            --query 'LayerVersionArn' \
            --output text)
          echo "::set-output name=layer_arn::$LAYER_ARN"

      - name: Check if Lambda function exists
        id: check_function
        run: |
          if ! aws lambda get-function --function-name meraki-network-automation &> /dev/null; then
            echo "::set-output name=exists::false"
          else
            echo "::set-output name=exists::true"
          fi
          
      - name: Create Lambda Execution Role
        id: create_role
        env:
          FUNCTION_NAME: ${{ github.event.inputs.function_name || 'meraki-network-automation' }}
        run: |
          ROLE_NAME="lambda-${FUNCTION_NAME}-execution-role"
          
          # Create trust policy document
          cat > trust-policy.json << EOF
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com"
                },
                "Action": "sts:AssumeRole"
              }
            ]
          }
          EOF
          
          # Check if role already exists
          if aws iam get-role --role-name "$ROLE_NAME" &> /dev/null; then
            echo "Role $ROLE_NAME already exists"
            ROLE_ARN=$(aws iam get-role --role-name "$ROLE_NAME" --query 'Role.Arn' --output text)
          else
            echo "Creating IAM role: $ROLE_NAME"
            ROLE_ARN=$(aws iam create-role \
              --role-name "$ROLE_NAME" \
              --assume-role-policy-document file://trust-policy.json \
              --description "Execution role for Lambda function $FUNCTION_NAME" \
              --query 'Role.Arn' \
              --output text)
            
            # Attach basic Lambda execution policy
            aws iam attach-role-policy \
              --role-name "$ROLE_NAME" \
              --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
            
            # Attach VPC execution policy if VPC is enabled
            if [ "${{ github.event.inputs.enable_vpc || 'true' }}" = "true" ]; then
              aws iam attach-role-policy \
                --role-name "$ROLE_NAME" \
                --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
            fi
            
            echo "Waiting for role to be available..."
            sleep 10
          fi
          
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT
          echo "Created/Found role ARN: $ROLE_ARN"

      - name: Validate Lambda role ARN
        id: validate_role
        run: |
          # Use the created role ARN instead of secret
          ROLE_ARN="${{ steps.create_role.outputs.role_arn }}"
          
          if [ -z "$ROLE_ARN" ]; then
            echo "::error::Failed to create or retrieve Lambda execution role"
            exit 1
          fi
          
          # Extract account ID and role name for validation
          ACCOUNT_ID=$(echo $ROLE_ARN | sed -n 's/^arn:aws:iam::\([0-9]\{12\}\):role\/.*$/\1/p')
          ROLE_NAME=$(echo $ROLE_ARN | sed -n 's/^arn:aws:iam::[0-9]\{12\}:role\/\(.*\)$/\1/p')
          
          if [ -z "$ACCOUNT_ID" ] || [ -z "$ROLE_NAME" ]; then
            echo "::error::Invalid IAM role ARN format"
            echo "::error::Expected format: arn:aws:iam::<12-digit-account-id>:role/<role-name>"
            exit 1
          fi
          
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT
          echo "Successfully validated role ARN format"
          
      - name: Create CloudWatch log group (optional)
        env:
          FUNCTION_NAME: ${{ github.event.inputs.function_name || 'meraki-network-automation' }}
        run: |
          LOG_GROUP="/aws/lambda/$FUNCTION_NAME"
          if ! aws logs describe-log-groups --log-group-name-prefix "$LOG_GROUP" | grep -q "$LOG_GROUP"; then
            echo "Attempting to create log group: $LOG_GROUP"
            if aws logs create-log-group --log-group-name "$LOG_GROUP" 2>/dev/null; then
              echo "Successfully created log group"
              aws logs put-retention-policy --log-group-name "$LOG_GROUP" --retention-in-days 30 2>/dev/null || echo "Could not set retention policy"
            else
              echo "Warning: Could not create log group. Lambda will create it automatically on first execution."
            fi
          else
            echo "Log group already exists: $LOG_GROUP"
          fi

      - name: Create Lambda function
        if: steps.check_function.outputs.exists == 'false'
        env:
          LAMBDA_ROLE: ${{ steps.validate_role.outputs.role_arn }}
          FUNCTION_NAME: ${{ github.event.inputs.function_name || 'meraki-network-automation' }}
          MEMORY_SIZE: ${{ github.event.inputs.memory || '256' }}
          LAYER_ARN: ${{ steps.layer_version.outputs.layer_arn }}
          ENABLE_VPC: ${{ github.event.inputs.enable_vpc || 'true' }}
          SUBNET_ID: ${{ secrets.VPC_SUBNET_ID }}
          SECURITY_GROUP_ID: ${{ secrets.LAMBDA_SECURITY_GROUP_ID }}
        run: |
          echo "Using IAM Role: $LAMBDA_ROLE"
          echo "Using Layer ARN: $LAYER_ARN"
          
          if [ "$ENABLE_VPC" = "true" ]; then
            if [ -z "$SUBNET_ID" ] || [ -z "$SECURITY_GROUP_ID" ]; then
              echo "::error::VPC_SUBNET_ID and LAMBDA_SECURITY_GROUP_ID secrets are required for VPC deployment"
              exit 1
            fi
            
            echo "Creating Lambda function with VPC configuration..."
            echo "Subnet ID: $SUBNET_ID"
            echo "Security Group ID: $SECURITY_GROUP_ID"
            echo "Static IP: ${{ secrets.STATIC_IP_ADDRESS }}"
            
            aws lambda create-function \
              --function-name "$FUNCTION_NAME" \
              --runtime python3.9 \
              --handler lambda_handler.lambda_handler \
              --role "$LAMBDA_ROLE" \
              --timeout 300 \
              --memory-size "$MEMORY_SIZE" \
              --layers "$LAYER_ARN" \
              --vpc-config "SubnetIds=[$SUBNET_ID],SecurityGroupIds=[$SECURITY_GROUP_ID]" \
              --environment "Variables={MERAKI_API_KEY=${{ secrets.MERAKI_API_KEY }},ORGANIZATION_ID=${{ secrets.ORGANIZATION_ID }},STATIC_IP=${{ secrets.STATIC_IP_ADDRESS }}}" \
              --zip-file fileb://lambda.zip
          else
            echo "Creating Lambda function without VPC..."
            aws lambda create-function \
              --function-name "$FUNCTION_NAME" \
              --runtime python3.9 \
              --handler lambda_handler.lambda_handler \
              --role "$LAMBDA_ROLE" \
              --timeout 300 \
              --memory-size "$MEMORY_SIZE" \
              --layers "$LAYER_ARN" \
              --environment "Variables={MERAKI_API_KEY=${{ secrets.MERAKI_API_KEY }},ORGANIZATION_ID=${{ secrets.ORGANIZATION_ID }}}" \
              --zip-file fileb://lambda.zip
          fi

      - name: Update Lambda function
        if: steps.check_function.outputs.exists == 'true'
        env:
          LAYER_ARN: ${{ steps.layer_version.outputs.layer_arn }}
          FUNCTION_NAME: ${{ github.event.inputs.function_name || 'meraki-network-automation' }}
          ENABLE_VPC: ${{ github.event.inputs.enable_vpc || 'true' }}
          SUBNET_ID: ${{ secrets.VPC_SUBNET_ID }}
          SECURITY_GROUP_ID: ${{ secrets.LAMBDA_SECURITY_GROUP_ID }}
        run: |
          # Update function code
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --zip-file fileb://lambda.zip
          
          # Wait for function update to complete
          echo "Waiting for function code update to complete..."
          aws lambda wait function-updated --function-name "$FUNCTION_NAME"
          
          # Update function configuration with VPC
          echo "Updating function configuration..."
          if [ "$ENABLE_VPC" = "true" ]; then
            STATIC_IP_VALUE="${{ secrets.STATIC_IP_ADDRESS }}"
            if [ -n "$STATIC_IP_VALUE" ]; then
              ENV_VARS="Variables={MERAKI_API_KEY=${{ secrets.MERAKI_API_KEY }},ORGANIZATION_ID=${{ secrets.ORGANIZATION_ID }},STATIC_IP=$STATIC_IP_VALUE}"
            else
              ENV_VARS="Variables={MERAKI_API_KEY=${{ secrets.MERAKI_API_KEY }},ORGANIZATION_ID=${{ secrets.ORGANIZATION_ID }}}"
            fi
            
            aws lambda update-function-configuration \
              --function-name "$FUNCTION_NAME" \
              --layers "$LAYER_ARN" \
              --vpc-config "SubnetIds=[$SUBNET_ID],SecurityGroupIds=[$SECURITY_GROUP_ID]" \
              --environment "$ENV_VARS"
          else
            aws lambda update-function-configuration \
              --function-name "$FUNCTION_NAME" \
              --layers "$LAYER_ARN" \
              --vpc-config "{}" \
              --environment "Variables={MERAKI_API_KEY=${{ secrets.MERAKI_API_KEY }},ORGANIZATION_ID=${{ secrets.ORGANIZATION_ID }}}"
          fi
          
          # Final wait for configuration update to complete
          echo "Waiting for configuration update to complete..."
          aws lambda wait function-updated --function-name "$FUNCTION_NAME"
          
          # Final wait for configuration update to complete
          echo "Waiting for configuration update to complete..."
          aws lambda wait function-updated --function-name "$FUNCTION_NAME"

