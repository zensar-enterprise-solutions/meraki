name: Deploy Lambda Function

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - prod
      function_name:
        description: 'Lambda function name'
        required: true
        default: 'meraki-network-automation'
      memory:
        description: 'Memory size (MB)'
        required: true
        default: '256'
        type: choice
        options:
          - '128'
          - '256'
          - '512'
          - '1024'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.13'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          mkdir -p package
          pip install -r requirements.txt -t package/
          
      - name: Package Lambda dependencies
        run: |
          # Install dependencies to package directory
          mkdir -p package
          pip install -r requirements.txt -t package/
          cp -r workinglocal package/
          cp lambda_handler.py package/
          
          # Create layer package
          cd package
          zip -r ../lambda-layer.zip .
          cd ..
          
          # Create function package
          zip -j lambda.zip package/lambda_handler.py
          zip -r lambda.zip workinglocal/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
          
      - name: Update Lambda Layer
        id: layer_version
        run: |
          LAYER_ARN=$(aws lambda publish-layer-version \
            --layer-name meraki-dependencies \
            --description "Dependencies for Meraki automation" \
            --zip-file fileb://lambda-layer.zip \
            --compatible-runtimes python3.13 \
            --query 'LayerVersionArn' \
            --output text)
          echo "::set-output name=layer_arn::$LAYER_ARN"

      - name: Check if Lambda function exists
        id: check_function
        run: |
          if ! aws lambda get-function --function-name meraki-network-automation &> /dev/null; then
            echo "::set-output name=exists::false"
          else
            echo "::set-output name=exists::true"
          fi
          
      - name: Validate Lambda role ARN
        id: validate_role
        run: |
          ROLE_ARN="${{ secrets.LAMBDA_ROLE_ARN }}"
          if [ -z "$ROLE_ARN" ]; then
            echo "::error::LAMBDA_ROLE_ARN secret is not set. Please add it in GitHub repository settings."
            echo "::error::Example format: arn:aws:iam::123456789012:role/lambda-meraki-role"
            exit 1
          fi
          
          # Extract account ID and role name for validation
          ACCOUNT_ID=$(echo $ROLE_ARN | sed -n 's/^arn:aws:iam::\([0-9]\{12\}\):role\/.*$/\1/p')
          ROLE_NAME=$(echo $ROLE_ARN | sed -n 's/^arn:aws:iam::[0-9]\{12\}:role\/\(.*\)$/\1/p')
          
          if [ -z "$ACCOUNT_ID" ] || [ -z "$ROLE_NAME" ]; then
            echo "::error::Invalid IAM role ARN format"
            echo "::error::Expected format: arn:aws:iam::<12-digit-account-id>:role/<role-name>"
            echo "::error::Example: arn:aws:iam::123456789012:role/lambda-meraki-role"
            exit 1
          fi
          
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT
          echo "Successfully validated role ARN format"
          
      - name: Create CloudWatch log group
        env:
          FUNCTION_NAME: ${{ github.event.inputs.function_name || 'meraki-network-automation' }}
        run: |
          LOG_GROUP="/aws/lambda/$FUNCTION_NAME"
          if ! aws logs describe-log-groups --log-group-name-prefix "$LOG_GROUP" | grep -q "$LOG_GROUP"; then
            echo "Creating log group: $LOG_GROUP"
            aws logs create-log-group --log-group-name "$LOG_GROUP"
            aws logs put-retention-policy --log-group-name "$LOG_GROUP" --retention-in-days 30
          else
            echo "Log group already exists: $LOG_GROUP"
          fi

      - name: Create Lambda function
        if: steps.check_function.outputs.exists == 'false'
        env:
          LAMBDA_ROLE: ${{ steps.validate_role.outputs.role_arn }}
          FUNCTION_NAME: ${{ github.event.inputs.function_name || 'meraki-network-automation' }}
          MEMORY_SIZE: ${{ github.event.inputs.memory || '256' }}
          LAYER_ARN: ${{ steps.layer_version.outputs.layer_arn }}
        run: |
          echo "Using IAM Role: $LAMBDA_ROLE"
          echo "Using Layer ARN: $LAYER_ARN"
          if [ -z "$LAMBDA_ROLE" ]; then
            echo "::error::Lambda role ARN is empty"
            exit 1
          fi
          aws lambda create-function \
            --function-name "$FUNCTION_NAME" \
            --runtime python3.13 \
            --handler lambda_handler.lambda_handler \
            --role "$LAMBDA_ROLE" \
            --timeout 300 \
            --memory-size "$MEMORY_SIZE" \
            --layers "$LAYER_ARN" \
            --environment "Variables={MERAKI_API_KEY=${{ secrets.MERAKI_API_KEY }},ORGANIZATION_ID=${{ secrets.ORGANIZATION_ID }}}" \
            --zip-file fileb://lambda.zip

      - name: Update Lambda function
        if: steps.check_function.outputs.exists == 'true'
        env:
          LAYER_ARN: ${{ steps.layer_version.outputs.layer_arn }}
          FUNCTION_NAME: ${{ github.event.inputs.function_name || 'meraki-network-automation' }}
        run: |
          # Update function code
          aws lambda update-function-code \
            --function-name "$FUNCTION_NAME" \
            --zip-file fileb://lambda.zip
          
          # Wait for function update to complete
          echo "Waiting for function code update to complete..."
          aws lambda wait function-updated --function-name "$FUNCTION_NAME"
          
          # Update function configuration
          echo "Updating function configuration..."
          aws lambda update-function-configuration \
            --function-name "$FUNCTION_NAME" \
            --layers "$LAYER_ARN" \
            --environment "Variables={MERAKI_API_KEY=${{ secrets.MERAKI_API_KEY }},ORGANIZATION_ID=${{ secrets.ORGANIZATION_ID }}}"
          
          # Final wait for configuration update
          echo "Waiting for configuration update to complete..."
          aws lambda wait function-updated --function-name "$FUNCTION_NAME"
